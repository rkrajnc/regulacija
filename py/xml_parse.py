#!/usr/bin/python3
import xml.etree.ElementTree
import os

def ds18b20_list(element, c, h):
  name = element.tag[0:-5]
  cname_base = element.tag[0:-4].upper()
  
  for d in element.findall(name):
    rom = d.attrib['rom']
    c.write("{ { ")
    for i in range(0,len(rom),2):
      c.write("0x" + rom[i:i+2] + ", ")
    c.write("} },\n")

    h.write(cname_base + d.attrib['cname'] + ',\n')

  h.write(cname_base + 'NR\n')

def relay_list(element, c, h):
  name = element.tag[0:-5]
  cname_base = element.tag[0:-4].upper()
  
  for d in element.findall(name):
    pin = d.attrib['pin']
    port = bytes(pin[1], 'utf8')[0] - bytes('A', 'utf8')[0]
    bit  = int(pin[2:])
    c.write("{ " + str(port) + ", 1 << " + str(bit) + " },\n")
    
    h.write(cname_base + d.attrib['cname'] + ',\n')

  h.write(cname_base + 'NR\n')

def valve_list(element, c, h):
  name = element.tag[0:-5]
  cname_base = element.tag[0:-4].upper()
  
  for d in element.findall(name):
    name = d.attrib['cname']
    c.write("{ RELAY_VALVE_" + name + "_EN, RELAY_VALVE_" + name + "_DIR },\n")
    
    h.write(cname_base + d.attrib['cname'] + ',\n')

  h.write(cname_base + 'NR\n')

def config_list(element, c, h):
  for d in element.findall('*'):
    sign = d.attrib['format'][0] == 's'
    dot  = d.attrib['format'].find('.')
    ibits = int(d.attrib['format'][1:dot])
    fbits = int(d.attrib['format'][dot+1:])
    size = sign + ibits + fbits
    
    reset = int(float(d.attrib['reset']) * (1 << fbits))
    
    decl = ""
    if not sign: decl += "u"
    decl += "int" + str(size) + "_t "
    decl += d.tag

    c.write('__attribute__((section(".config"))) ' + decl + ' = ' + hex(reset) + ';')
    h.write('extern ' + decl + ';\n')

def list2c(element):
  if element.tag[-5:] == "_list":
    folder = "src/auto/"
    if not os.path.exists(folder): os.mkdir(folder)
    c = open(folder + element.tag + ".c", 'w')
    h = open(folder + element.tag + ".h", 'w')
    warning = "/* DO NOT EDIT - this file is autogenerated from XML (" + element.tag + ") */\n"
    c.write(warning)
    h.write(warning)
    name = element.tag[0:-5]
    cname_base = element.tag[0:-4].upper()
    
    # TODO do something generic when (if) needed
    for d in element.findall(name):
      rom = d.attrib['rom']
      c.write("{ ")
      for i in range(0,len(rom),2):
        c.write("0x" + rom[i:i+2] + ", ")
      c.write("},\n")

      h.write(cname_base + d.attrib['cname'] + ',\n')

    h.write(cname_base + 'NR\n')

  else:
    raise Exception("Not a parsable element")


def gen_c():
  folder = "src/auto/"
  if not os.path.exists(folder): os.mkdir(folder)
  xmlf = xml.etree.ElementTree.parse("xml/xml.xml")
  for i in [ "ds18b20_list", "config_list", "relay_list", "valve_list" ]:
    c = open(folder + i + ".c", 'w')
    h = open(folder + i + ".h", 'w')
    warning = "/* DO NOT EDIT - this file is autogenerated from XML (" + i + ") */\n"
    c.write(warning)
    h.write(warning)
    element = xmlf.find(i)
    print(element)
    eval(i)(element, c, h)


if __name__ == "__main__":
  import sys
  if len(sys.argv) > 1:
    for el in xml.etree.ElementTree.parse(sys.argv[1]).getiterator():
      print(el)
